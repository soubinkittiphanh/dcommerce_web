{"version":3,"file":"pages/admin/report/MA/mixin/excel.js","sources":["webpack:///./pages/admin/report/MA/mixin/excel.js"],"sourcesContent":["import * as XLSX from 'xlsx'\nexport default {\n    data() {\n        return {\n            sharedMessage: 'Hello from mixin!'\n        };\n    },\n    methods: {\n        // Excel Export Functions\n        // Add these methods to your Vue component\n\n        // Individual Export Functions\n        async exportMinistryReportToExcel() {\n            try {\n                if (!this.ministrySummaryReport.length) {\n                    this.$toast.warning('No ministry data to export')\n                    return\n                }\n\n                const workbook = this.createExcelWorkbook()\n                const worksheet = this.createMinistryWorksheet()\n\n                // Add worksheet to workbook\n                XLSX.utils.book_append_sheet(workbook, worksheet, 'Ministry Report')\n\n                // Generate filename with current date\n                const filename = `Ministry_Report_${this.formatDateForFilename()}.xlsx`\n\n                // Save file\n                XLSX.writeFile(workbook, filename)\n                this.$toast.success('Ministry report exported successfully')\n\n            } catch (error) {\n                console.error('Export error:', error)\n                this.$toast.error('Failed to export ministry report')\n            }\n        },\n\n        async exportBankAccountReportToExcel() {\n            try {\n                if (!this.bankAccountSummaryReport.length) {\n                    this.$toast.warning('No bank account data to export')\n                    return\n                }\n\n                const workbook = this.createExcelWorkbook()\n                const worksheet = this.createBankAccountWorksheet()\n\n                XLSX.utils.book_append_sheet(workbook, worksheet, 'Bank Account Report')\n\n                const filename = `Bank_Account_Report_${this.formatDateForFilename()}.xlsx`\n                XLSX.writeFile(workbook, filename)\n                this.$toast.success('Bank account report exported successfully')\n\n            } catch (error) {\n                console.error('Export error:', error)\n                this.$toast.error('Failed to export bank account report')\n            }\n        },\n\n        async exportChartAccountReportToExcel() {\n            try {\n                if (!this.chartAccountSummaryReport.length) {\n                    this.$toast.warning('No chart account data to export')\n                    return\n                }\n\n                const workbook = this.createExcelWorkbook()\n                const worksheet = this.createChartAccountWorksheet()\n\n                XLSX.utils.book_append_sheet(workbook, worksheet, 'Chart Account Report')\n\n                const filename = `Chart_Account_Report_${this.formatDateForFilename()}.xlsx`\n                XLSX.writeFile(workbook, filename)\n                this.$toast.success('Chart account report exported successfully')\n\n            } catch (error) {\n                console.error('Export error:', error)\n                this.$toast.error('Failed to export chart account report')\n            }\n        },\n\n        // Combined Export Function\n        async exportAllReportsToExcel() {\n            try {\n                const hasMinistry = this.ministrySummaryReport && this.ministrySummaryReport.length > 0\n                const hasBankAccount = this.bankAccountSummaryReport && this.bankAccountSummaryReport.length > 0\n                const hasChartAccount = this.chartAccountSummaryReport && this.chartAccountSummaryReport.length > 0\n\n                if (!hasMinistry && !hasBankAccount && !hasChartAccount) {\n                    this.$toast.warning('No data available to export')\n                    return\n                }\n\n                const workbook = this.createExcelWorkbook()\n\n                // Add each report as a separate sheet\n                if (hasMinistry) {\n                    const ministryWorksheet = this.createMinistryWorksheet()\n                    XLSX.utils.book_append_sheet(workbook, ministryWorksheet, 'Ministry Report')\n                }\n\n                if (hasBankAccount) {\n                    const bankAccountWorksheet = this.createBankAccountWorksheet()\n                    XLSX.utils.book_append_sheet(workbook, bankAccountWorksheet, 'Bank Account Report')\n                }\n\n                if (hasChartAccount) {\n                    const chartAccountWorksheet = this.createChartAccountWorksheet()\n                    XLSX.utils.book_append_sheet(workbook, chartAccountWorksheet, 'Chart Account Report')\n                }\n\n                const filename = `Financial_Reports_${this.formatDateForFilename()}.xlsx`\n                XLSX.writeFile(workbook, filename)\n                this.$toast.success('All reports exported successfully')\n\n            } catch (error) {\n                console.error('Export error:', error)\n                this.$toast.error('Failed to export reports')\n            }\n        },\n\n        // Helper Functions\n        createExcelWorkbook() {\n            return XLSX.utils.book_new()\n        },\n\n        createMinistryWorksheet() {\n            // Create header row\n            const headers = [\n                '#',\n                'Ministry Code',\n                'Ministry Name',\n                'Settlement Count',\n                ...this.currencyList,\n                'Total (LAK)'\n            ]\n\n            // Create data rows\n            const data = this.ministrySummaryReport.map((item, index) => {\n                const row = [\n                    index + 1,\n                    item.ministryCode,\n                    item.ministryName,\n                    item.settlementCount\n                ]\n\n                // Add currency amounts\n                this.currencyList.forEach(currency => {\n                    row.push(item.amounts?.[currency] || 0)\n                })\n\n                // Add total\n                row.push(item.totalLakEquivalent || 0)\n\n                return row\n            })\n\n            // Add totals row\n            const totalsRow = [\n                '',\n                '',\n                'TOTAL',\n                this.ministrySummaryReport.reduce((sum, m) => sum + m.settlementCount, 0)\n            ]\n\n            this.currencyList.forEach(currency => {\n                totalsRow.push(this.ministryTotals?.currencyTotals?.[currency] || 0)\n            })\n\n            totalsRow.push(this.ministryTotals?.totalLakEquivalent || 0)\n\n            // Combine headers, data, and totals\n            const worksheetData = [headers, ...data, totalsRow]\n\n            // Create worksheet\n            const worksheet = XLSX.utils.aoa_to_sheet(worksheetData)\n\n            // Add metadata\n            this.addWorksheetMetadata(worksheet, 'Ministry Financial Report')\n\n            return worksheet\n        },\n\n        createBankAccountWorksheet() {\n            const headers = [\n                '#',\n                'Account Number',\n                'Account Name',\n                'Bank Name',\n                'Account Type',\n                'Settlement Count',\n                ...this.currencyList,\n                'Total (LAK)'\n            ]\n\n            const data = this.bankAccountSummaryReport.map((item, index) => {\n                const row = [\n                    index + 1,\n                    item.accountNumber,\n                    item.accountName,\n                    item.bankName,\n                    item.accountType,\n                    item.settlementCount\n                ]\n\n                this.currencyList.forEach(currency => {\n                    row.push(item.amounts?.[currency] || 0)\n                })\n\n                row.push(item.totalLakEquivalent || 0)\n                return row\n            })\n\n            const totalsRow = [\n                '', '', '', '', 'TOTAL',\n                this.bankAccountSummaryReport.reduce((sum, b) => sum + b.settlementCount, 0)\n            ]\n\n            this.currencyList.forEach(currency => {\n                totalsRow.push(this.bankAccountTotals?.currencyTotals?.[currency] || 0)\n            })\n\n            totalsRow.push(this.bankAccountTotals?.totalLakEquivalent || 0)\n\n            const worksheetData = [headers, ...data, totalsRow]\n            const worksheet = XLSX.utils.aoa_to_sheet(worksheetData)\n            this.addWorksheetMetadata(worksheet, 'Bank Account Financial Report')\n\n            return worksheet\n        },\n\n        createChartAccountWorksheet() {\n            const headers = [\n                '#',\n                'Account Number',\n                'Account Name',\n                'Settlement Count',\n                ...this.currencyList,\n                'Total (LAK)'\n            ]\n\n            const data = this.chartAccountSummaryReport.map((item, index) => {\n                const row = [\n                    index + 1,\n                    item.accountNumber,\n                    item.accountName,\n                    item.settlementCount\n                ]\n\n                this.currencyList.forEach(currency => {\n                    row.push(item.amounts?.[currency] || 0)\n                })\n\n                row.push(item.totalLakEquivalent || 0)\n                return row\n            })\n\n            const totalsRow = [\n                '', '', 'TOTAL',\n                this.chartAccountSummaryReport.reduce((sum, c) => sum + c.settlementCount, 0)\n            ]\n\n            this.currencyList.forEach(currency => {\n                totalsRow.push(this.chartAccountTotals?.currencyTotals?.[currency] || 0)\n            })\n\n            totalsRow.push(this.chartAccountTotals?.totalLakEquivalent || 0)\n\n            const worksheetData = [headers, ...data, totalsRow]\n            const worksheet = XLSX.utils.aoa_to_sheet(worksheetData)\n            this.addWorksheetMetadata(worksheet, 'Chart Account Financial Report')\n\n            return worksheet\n        },\n\n        addWorksheetMetadata(worksheet, title) {\n            // Add title and date range as metadata\n            const metadata = [\n                [title],\n                [`Report Period: ${this.dateRange?.start || 'N/A'} to ${this.dateRange?.end || 'N/A'}`],\n                [`Generated: ${new Date().toLocaleString()}`],\n                [''] // Empty row before data\n            ]\n\n            // Insert metadata at the top\n            XLSX.utils.sheet_add_aoa(worksheet, metadata, { origin: 'A1' })\n\n            // Adjust the existing data to start after metadata\n            const range = XLSX.utils.decode_range(worksheet['!ref'])\n            range.e.r += metadata.length\n            worksheet['!ref'] = XLSX.utils.encode_range(range)\n        },\n\n        formatDateForFilename() {\n            const now = new Date()\n            const year = now.getFullYear()\n            const month = String(now.getMonth() + 1).padStart(2, '0')\n            const day = String(now.getDate()).padStart(2, '0')\n            const hours = String(now.getHours()).padStart(2, '0')\n            const minutes = String(now.getMinutes()).padStart(2, '0')\n\n            return `${year}${month}${day}_${hours}${minutes}`\n        }\n    }\n};\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAWA;AACA;AASA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AASA;AACA;AAOA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;A","sourceRoot":""}