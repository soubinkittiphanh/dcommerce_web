<template>
  <v-app dark>
    <!-- Terminal Selection Dialog -->
    <v-dialog v-model="terminalDialog" scrollable max-width="600" persistent>
      <v-card class="terminal-dialog">
        <v-card-title class="text-h5 primary white--text">
          <v-icon left>mdi-monitor</v-icon>
          ເລືອກ Terminal
        </v-card-title>
        <v-divider></v-divider>
        <v-card-text class="pa-4" style="max-height: 400px">
          <v-radio-group v-model="terminalSelected" class="mt-2">
            <v-card
              v-for="terminal in findAllTerminal"
              :key="terminal.id"
              class="mb-3 terminal-card"
              :class="{ 'selected': terminalSelected === terminal.id }"
              @click="terminalSelected = terminal.id"
              outlined
              hover
            >
              <v-card-text class="pa-3">
                <v-radio
                  :value="terminal.id"
                  :label="`${terminal.name} - ${terminal.description}`"
                  color="primary"
                ></v-radio>
              </v-card-text>
            </v-card>
          </v-radio-group>
        </v-card-text>
        <v-divider></v-divider>
        <v-card-actions class="pa-4">
          <v-spacer></v-spacer>
          <v-btn color="grey" text @click="terminalDialog = false">
            ຍົກເລີກ
          </v-btn>
          <v-btn color="primary" @click="switchTerminal" :disabled="!terminalSelected">
            <v-icon left>mdi-check</v-icon>
            ເລືອກ
          </v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>

    <!-- Quantity Update Dialog -->
    <v-dialog v-model="qtyDialog" max-width="400px">
      <v-card>
        <v-card-title class="text-h6 primary white--text">
          <v-icon left>mdi-counter</v-icon>
          ອັບເດດຈຳນວນ
        </v-card-title>
        <v-card-text class="pa-4">
          <v-text-field
            v-model.number="newQty"
            label="ໃສ່ຈຳນວນໃໝ່"
            type="number"
            outlined
            dense
            autofocus
            :rules="[v => v > 0 || 'ຈຳນວນຕ້ອງມາກກວ່າ 0']"
          ></v-text-field>
        </v-card-text>
        <v-card-actions class="pa-4">
          <v-spacer></v-spacer>
          <v-btn color="grey" text @click="qtyDialog = false">ຍົກເລີກ</v-btn>
          <v-btn color="primary" @click="updateQty">
            <v-icon left>mdi-check</v-icon>
            ບັນທຶກ
          </v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>

    <!-- Other Dialogs -->
    <v-dialog v-model="customerDialog" max-width="1200">
      <customer-list @close-dialog="customerDialog = false"></customer-list>
    </v-dialog>

    <v-dialog v-model="pricingDialog" max-width="1200">
      <pricing-option
        :key="pricingDialogKey"
        @close-dialog="pricingDialog = false"
        :record-id="productPricingSelected"
      ></pricing-option>
    </v-dialog>

    <v-dialog v-model="deliveryForm" max-width="1200" persistent>
      <delivery-form
        @post-transaction="postTransactionForOnlineCustomer"
        @close-dialog="deliveryForm = false"
        :key="shippingFormKey"
      ></delivery-form>
    </v-dialog>

    <v-dialog v-model="isloading" hide-overlay persistent width="300">
      <loading-indicator></loading-indicator>
    </v-dialog>

    <v-dialog v-model="quotation" hide-overlay width="1200">
      <Quotation></Quotation>
    </v-dialog>

    <!-- Enhanced Header App Bar -->
    <v-app-bar app color="primary" dark clipped-left clipped-right elevation="4" height="72">
      <v-container fluid class="pa-2">
        <v-row align="center" no-gutters>
          <v-col cols="12" md="2" class="d-flex align-center">
            <v-btn icon @click="drawer = !drawer" class="mr-2">
              <v-icon>mdi-menu</v-icon>
            </v-btn>
          </v-col>
          
          <v-col cols="12" md="6" lg="4" class="px-2">
            <v-text-field
              v-model="serachModel"
              clearable
              clear-icon="mdi-close"
              prepend-inner-icon="mdi-magnify"
              outlined
              dense
              label="ຄົ້ນຫາສິນຄ້າ..."
              solo-inverted
              hide-details
              class="search-field"
            />
          </v-col>
          
          <v-col cols="12" md="4" lg="6" class="d-flex justify-end">
            <div class="d-flex align-center flex-wrap ga-2">
              <v-btn
                v-for="item in headerMenu"
                :key="item.title"
                :to="item.path"
                @click="item.method"
                outlined
                class="header-btn"
                :class="{ 'active': $route.path === item.path }"
              >
                <v-icon left size="20">{{ item.icon }}</v-icon>
                <span class="d-none d-sm-inline">{{ item.title }}</span>
              </v-btn>
            </div>
          </v-col>
        </v-row>
      </v-container>
    </v-app-bar>

    <!-- Enhanced Left Navigation Drawer -->
    <v-navigation-drawer app v-model="drawer" clipped width="280" class="drawer-left">
      <div class="drawer-header pa-4">
        <v-chip
          color="warning"
          outlined
          block
          @click="terminalDialog = true"
          class="terminal-chip"
        >
          <v-icon left>mdi-monitor</v-icon>
          <span class="text-truncate">
            {{ currentTerminal?.description || 'ເລືອກ Terminal' }}
            <br>
            <small>{{ currentTerminal?.name || '' }}</small>
          </span>
          <v-icon right>mdi-chevron-down</v-icon>
        </v-chip>
      </div>

      <v-divider></v-divider>

      <v-list dense nav class="py-0">
        <v-subheader class="text-overline font-weight-bold px-4">
          ໝວດໝູ່ສິນຄ້າ
        </v-subheader>
        
        <v-list-item-group v-model="selectedItem" color="primary">
          <v-list-item
            v-for="(item, i) in categoryList"
            :key="i"
            class="category-item"
            :class="{ 'active': selectedItem === i }"
          >
            <v-list-item-icon>
              <v-icon>mdi-tag</v-icon>
            </v-list-item-icon>
            <v-list-item-content>
              <v-list-item-title class="font-weight-medium text-wrap">
                {{ item.categ_name }}
              </v-list-item-title>
            </v-list-item-content>
          </v-list-item>
        </v-list-item-group>
      </v-list>
    </v-navigation-drawer>

    <!-- Main Content Area -->
    <v-main class="main-content">
      <v-container fluid class="pa-4">
        <Nuxt :key="productComponentKey" />
      </v-container>
    </v-main>

    <!-- Enhanced Right Cart Drawer -->
    <v-navigation-drawer
      app
      right
      clipped
      width="480"
      fixed
      class="cart-drawer"
      :permanent="$vuetify.breakpoint.lgAndUp"
    >
      <div class="cart-container">
        <!-- Cart Header -->
        <div class="cart-header pa-3 primary white--text">
          <v-row align="center" no-gutters>
            <v-col>
              <h3 class="text-h6 mb-0">
                <v-icon left>mdi-cart</v-icon>
                ກະຕ່າສິນຄ້າ
              </h3>
            </v-col>
            <v-col cols="auto">
              <v-chip color="white" text-color="primary" small>
                {{ productCart.length }} ລາຍການ
              </v-chip>
            </v-col>
          </v-row>
        </div>

        <!-- Customer & Actions Bar -->
        <div class="customer-bar pa-3 grey lighten-5">
          <v-row align="center" no-gutters class="ga-2">
            <v-col>
              <v-chip
                color="success"
                outlined
                @click="openCustomerDialog"
                class="customer-chip"
              >
                <v-icon left small>mdi-account</v-icon>
                <span class="text-truncate">{{ customerDisplayName }}</span>
                <v-icon right small>mdi-pencil</v-icon>
              </v-chip>
            </v-col>
            
            <v-col cols="auto">
              <v-btn icon color="primary" @click="openDeliveryBox" title="ຈັດສົ່ງ">
                <v-icon>mdi-bike-fast</v-icon>
              </v-btn>
              
              <v-btn icon color="primary" @click="newOrder" title="ອໍເດີໃໝ່">
                <v-icon>mdi-file-document-refresh-outline</v-icon>
              </v-btn>
            </v-col>
          </v-row>
        </div>

        <!-- Cart Items -->
        <div class="cart-items flex-grow-1">
          <v-card flat height="100%" class="d-flex flex-column">
            <!-- Cart Items Header -->
            <div class="cart-items-header pa-2 grey lighten-4">
              <v-row no-gutters align="center" class="text-caption font-weight-bold">
                <v-col cols="1"></v-col>
                <v-col cols="4">ສິນຄ້າ</v-col>
                <v-col cols="3" class="text-center">ຈຳນວນ</v-col>
                <v-col cols="4" class="text-right">ລາຄາ</v-col>
              </v-row>
            </div>

            <!-- Cart Items List -->
            <div class="cart-items-list flex-grow-1 overflow-y-auto">
              <template v-if="productCart.length > 0">
                <v-card
                  v-for="item in productCart"
                  :key="item.id"
                  flat
                  class="cart-item pa-2"
                  :class="{ 'cart-item-hover': true }"
                >
                  <v-row no-gutters align="center">
                    <!-- Delete Button -->
                    <v-col cols="1">
                      <v-btn
                        icon
                        small
                        color="error"
                        @click="deleteProductFromCart(item)"
                        title="ລົບອອກ"
                      >
                        <v-icon small>mdi-delete</v-icon>
                      </v-btn>
                    </v-col>

                    <!-- Product Name -->
                    <v-col cols="4" class="pr-2">
                      <div class="text-body-2 font-weight-medium text-wrap">
                        {{ item.pro_name }}
                      </div>
                    </v-col>

                    <!-- Quantity Controls -->
                    <v-col cols="3">
                      <div class="d-flex align-center justify-center">
                        <v-btn
                          icon
                          x-small
                          @click="deleteProduct(item)"
                          :disabled="item.qty <= 1"
                        >
                          <v-icon small>mdi-minus</v-icon>
                        </v-btn>
                        
                        <v-btn
                          text
                          small
                          @click="openQtyDialog(item)"
                          class="mx-1 qty-btn"
                          min-width="40"
                        >
                          {{ item.qty }}
                        </v-btn>
                        
                        <v-btn icon x-small @click="addProduct(item)">
                          <v-icon small>mdi-plus</v-icon>
                        </v-btn>
                      </div>
                    </v-col>

                    <!-- Price -->
                    <v-col cols="4" class="text-right">
                      <v-chip
                        small
                        color="warning"
                        outlined
                        @click="pricingLogig(item)"
                        class="price-chip"
                      >
                        {{ formatNumber(item.localPrice * item.qty) }}
                      </v-chip>
                    </v-col>
                  </v-row>
                </v-card>
              </template>
              
              <div v-else class="empty-cart pa-4 text-center">
                <v-icon size="64" color="grey lighten-2">mdi-cart-outline</v-icon>
                <p class="text-body-2 grey--text mt-2">ກະຕ່າວ່າງເປົ່າ</p>
              </div>
            </div>
          </v-card>
        </div>

        <!-- Cart Footer -->
        <div class="cart-footer">
          <!-- Discount & Payment Row -->
          <div class="payment-inputs pa-3 grey lighten-5">
            <v-row class="ga-2">
              <v-col cols="4">
                <v-text-field
                  v-model.number="discount"
                  label="ສ່ວນຫລຸດ"
                  type="number"
                  outlined
                  dense
                  hide-details
                  prepend-inner-icon="mdi-percent"
                ></v-text-field>
              </v-col>
              <v-col cols="4">
                <v-text-field
                  v-model.number="cashReceived"
                  label="ຮັບເງິນ"
                  type="number"
                  outlined
                  dense
                  hide-details
                  prepend-inner-icon="mdi-cash"
                ></v-text-field>
              </v-col>
              <v-col cols="4">
                <v-text-field
                  v-model.number="changes"
                  label="ທອນ"
                  outlined
                  dense
                  hide-details
                  disabled
                  prepend-inner-icon="mdi-cash-refund"
                ></v-text-field>
              </v-col>
            </v-row>
          </div>

          <!-- Total Display -->
          <div class="total-display pa-3">
            <v-row align="center" no-gutters>
              <v-col>
                <h3 class="text-h6 font-weight-bold">ລວມທັງໝົດ:</h3>
              </v-col>
              <v-col cols="auto">
                <div class="d-flex flex-wrap ga-1">
                  <v-chip
                    v-for="item in currencyList"
                    :key="item.id"
                    color="success"
                    dark
                    class="font-weight-bold"
                  >
                    {{ item.code }}
                    {{ formatNumber((grandTotal - discount) / item.rate) }}
                  </v-chip>
                </div>
              </v-col>
            </v-row>
          </div>

          <!-- Payment Methods (Collapsible) -->
          <v-expand-transition>
  <div
    v-show="showCheckOut"
    class="pa-4"
    style="background-color: #f5f5f5; border-radius: 12px;"
  >
    <v-card elevation="1" class="pa-4 rounded-lg">
      <div class="text-h6 font-weight-bold mb-4">ວິທີການຊຳລະ</div>
      
      <v-row dense>
        <v-col
          v-for="(item, index) in paymentList"
          :key="index"
          cols="6"
          sm="4"
          md="3"
        >
          <PaymentCard
            :id="item.id"
            :title="item.payment_name"
            :icon="item.icon"
            :path="item.path"
            class="payment-card-item"
          >
            <template v-slot:iconSlot>
              <v-avatar size="40" class="elevation-1">
                <img :src="svgIcon" alt="icon" />
              </v-avatar>
            </template>
          </PaymentCard>
        </v-col>
      </v-row>
    </v-card>
  </div>
</v-expand-transition>


          <!-- Payment Toggle & Main Pay Button -->
          <div class="payment-actions pa-3">
            <v-btn
              text
              small
              @click="showCheckOut = !showCheckOut"
              class="mb-2"
              block
            >
              <v-icon left>{{ showCheckOut ? 'mdi-chevron-up' : 'mdi-chevron-down' }}</v-icon>
              {{ showCheckOut ? 'ເຊື່ອງ' : 'ສະແດງ' }} ວິທີການຊຳລະ
            </v-btn>

            <v-btn
              color="success"
              large
              block
              @click="postTransaction(false)"
              :disabled="productCart.length === 0"
              class="pay-button"
            >
              <v-icon left size="28">mdi-cash-register</v-icon>
              ຊຳລະເງິນ
              <v-chip dark small class="ml-2">
                {{ formatNumber(grandTotal - discount) }}
              </v-chip>
            </v-btn>
          </div>
        </div>
      </div>
    </v-navigation-drawer>
  </v-app>
</template>

<style scoped>
.terminal-dialog .terminal-card {
  cursor: pointer;
  transition: all 0.2s ease;
}

.terminal-dialog .terminal-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.12);
}

.terminal-dialog .terminal-card.selected {
  border-color: var(--v-primary-base) !important;
  background-color: rgba(var(--v-primary-base), 0.05);
}

.search-field {
  max-width: 100%;
}

.header-btn {
  min-width: auto;
  height: 40px;
}

.header-btn.active {
  background-color: rgba(255,255,255,0.2);
}

.drawer-left {
  border-right: 1px solid rgba(0,0,0,0.12);
}

.terminal-chip {
  height: auto !important;
  padding: 8px 12px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.terminal-chip:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.category-item {
  border-radius: 8px !important;
  margin: 4px 8px;
  transition: all 0.2s ease;
}

.category-item:hover {
  background-color: rgba(var(--v-primary-base), 0.08);
}

.category-item.active {
  background-color: rgba(var(--v-primary-base), 0.12);
  color: var(--v-primary-base);
}

.main-content {
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
}

.cart-drawer {
  border-left: 1px solid rgba(0,0,0,0.12);
}

.cart-container {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.cart-header {
  background: linear-gradient(135deg, var(--v-primary-base), var(--v-primary-darken1));
}

.customer-bar {
  border-bottom: 1px solid rgba(0,0,0,0.12);
}

.customer-chip {
  height: auto !important;
  padding: 8px;
  cursor: pointer;
  max-width: 100%;
}

.cart-items {
  min-height: 0;
}

.cart-items-header {
  border-bottom: 1px solid rgba(0,0,0,0.12);
}

.cart-items-list {
  max-height: calc(100vh - 500px);
}

.cart-item {
  border-bottom: 1px solid rgba(0,0,0,0.06);
  transition: background-color 0.2s ease;
}

.cart-item:hover {
  background-color: rgba(0,0,0,0.02);
}

.qty-btn {
  background-color: rgba(var(--v-primary-base), 0.1) !important;
  border-radius: 4px;
  font-weight: bold;
}

.price-chip {
  cursor: pointer;
}

.empty-cart {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.cart-footer {
  border-top: 1px solid rgba(0,0,0,0.12);
  background-color: white;
}

.payment-inputs {
  border-bottom: 1px solid rgba(0,0,0,0.06);
}

.total-display {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.payment-methods {
  border-bottom: 1px solid rgba(0,0,0,0.06);
}

.payment-card-item {
  transition: transform 0.2s ease;
}

.payment-card-item:hover {
  transform: translateY(-4px);
}


.pay-button {
  height: 56px !important;
  font-size: 18px;
  font-weight: bold;
  background: linear-gradient(135deg, #4CAF50, #45a049) !important;
  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);
}

.pay-button:hover {
  box-shadow: 0 6px 12px rgba(76, 175, 80, 0.4);
  transform: translateY(-1px);
}

.pay-button:disabled {
  background: #ccc !important;
  box-shadow: none !important;
  transform: none !important;
}

/* Responsive adjustments */
@media (max-width: 960px) {
  .cart-drawer {
    width: 100% !important;
  }
  
  .header-btn span {
    display: none;
  }
  
  .search-field {
    margin-bottom: 8px;
  }
}

@media (max-width: 600px) {
  .customer-bar .v-row {
    flex-direction: column;
    gap: 8px;
  }
  
  .payment-inputs .v-row {
    flex-direction: column;
  }
  
  .total-display .v-row {
    flex-direction: column;
    text-align: center;
  }
}
</style>
<script>
import CustomerList from '~/components/customer/CustomerList.vue'
import Quotation from '~/components/quotation'
import PricingOption from '~/components/PricingOption.vue'
import { mapMutations, mapState, mapGetters, mapActions } from 'vuex'
import { hostName, mainCompanyInfo } from '~/common/api'
import { defaultTicket, customerTicket } from '~/common/ticket.js'

import { getFormatNum, jsDateToMysqlDate, ticketHtml } from '~/common'
import {
  swalSuccess,
  swalError2,
  toastNotification,
  confirmSwal,
} from '~/common/index'
export default {
  components: { CustomerList, Quotation, PricingOption },
  name: 'DefaultLayout',
  data() {
    return {
      qtyDialog: false,
      newQty: 0,
      selectedProductId: null,

      upSvg: require('~/assets/icons/dcommerce/up.svg'),
      downSvg: require('~/assets/icons/dcommerce/down.svg'),
      showCheckOut: true,
      productPricingSelected: null,
      pricingDialogKey: 1,
      pricingDialog: false,
      onlineCustomerInfo: {},
      tickePreviewDialog: false,
      deliveryForm: false,
      productComponentKey: 1,
      terminalDialog: false,
      terminalSelected: null,
      search: '',
      svgIcon: require('~/assets/icons/cash.svg'),
      lastTransactionSaleHeaderId: 0,
      drawer: true,
      isloading: false,
      drawer_right: true,
      fixed: true,
      title: 'App name & Logo',
      customerDialog: false,
      discount: 0,
      cashReceived: 0,
      priceRule: [
        (v) => !!/^\d+$/.test(v) || 'ກະລຸນສາໃສ່ຈຳນວນ ເປັນຕົວເລກ ເທົ່ານັ້ນ',
      ],
      categoryList: [],
      quotation: false,
      paymentList: [],
      selectedItem: 0,
      headerMenu: [
        {
          title: 'Home',
          path: '/admin',
          icon: 'mdi-home-circle-outline',
          method: () => {},
        },
        {
          title: 'Orders',
          path: '/admin/ordersFromPos',
          // $router.push('/admin/ordersFromPos')
          icon: 'mdi-reorder-horizontal',
          method: () => {},
        },
        {
          title: 'Quotation',
          path: '',
          icon: 'mdi-receipt-text-clock-outline',
          method: this.setQuotation,
        },
        {
          title: 'Logout',
          path: '/admin/logout',
          icon: 'mdi-logout',
          method: () => {},
        },
      ],
      shippingFormKey: 1,
      currencyList: [],
      saleHeader: {
        bookingDate: '',
        remark: '',
        total: 0,
        exchangeRate: 1,
        isActive: true,
      },
    }
  },
  computed: {
    companyData() {
      console.log(`**********COMPANY DATA ${mainCompanyInfo}**********`)
      return mainCompanyInfo()
    },

    changes() {
      console.info(`CASH RECEIVED ${this.cashReceived}/ ${this.grandTotal} / ${this.discount}`)
      return this.formatNumber(
        this.cashReceived == 0
          ? 0
          : this.cashReceived - (this.grandTotal - this.discount)
      )
    },

    companyLogo() {
      return require(`~/assets/image/${this.companyData.ticketLogo}`)
    },
    ticketCommon() {
      return ticketHtml()
    },
    customerDisplayName() {
      if (this.currenctCustomer === null) {
        return ''
      }

      if (this.currenctCustomer.company) {
        return `${this.currenctCustomer.company} ${this.currenctCustomer.grade}`
      } else {
        return `${this.currenctCustomer.name} ${this.currenctCustomer.grade}`
      }
    },
    user() {
      return this.$auth.user || ''
    },
    ...mapState(['productSearchKeyboard']),
    ...mapGetters([
      'currentSelectedLocation',
      'cartOfProduct',
      'currenctSelectedCategoryId',
      'findAllProduct',
      'currentSelectedCustomer',
      'currentSelectedPayment',
      'findSelectedTerminal',
      'findAllTerminal',
      'findAllLocation',
    ]),
    serachModel: {
      get() {
        console.log(`Get menthod called`)
        return this.stateValue
      },
      set(value) {
        if (value) {
          console.log(`Set menthod called`)
          const lowerCaseSearchValue = value.toLowerCase()
          this.SetSearchKeyword(lowerCaseSearchValue)
        } else {
          console.log(`Set menthod called null`)
          this.SetSearchKeyword('')
        }
      },
    },

    currenctCustomer() {
      return this.currentSelectedCustomer
    },
    currentTerminal() {
      console.log(
        `ALL TEMINAL ${this.findAllTerminal.length} SELECTED ${this.findSelectedTerminal}`
      )
      return this.findAllTerminal.find(
        (el) => el['id'] == this.findSelectedTerminal
      )
    },
    productCart() {
      return this.cartOfProduct
    },
    generateSaleLine() {
      console.log(`Gennerate Sale LINE=====> ${this.productCart.length}`)
      let lines = []
      for (const iterator of this.productCart) {
        console.log(`Iterator ${JSON.stringify(iterator)}`)  
        lines.push({
          quantity: iterator.qty,
          unitRate: 1,
          // price: iterator.pro_price,
          price: iterator.localPrice,
          discount: 0,
          productId: iterator.id,
          productKey: iterator.id,
          unitId: iterator.stockUnitId,
          // total: iterator.qty * iterator.pro_price,
          total: iterator.qty * iterator.localPrice,
          isActive: true,
        })
      }
      return lines
    },
    selectedCategoryId() {
      return this.currenctSelectedCategoryId
    },
    currentPayment() {
      return this.currentSelectedPayment
    },
    currentPaymentCode() {
      const payment = this.paymentList.find(
        (el) => el.id == this.currentSelectedPayment
      )
      if (payment == undefined) return ''
      return payment['payment_code']
    },
    grandTotal() {
      const totalPrice = this.cartOfProduct.reduce((total, item) => {
        // return total + item.qty * item.pro_price;
        return total + item.qty * item.localPrice
      }, 0)
      return totalPrice
    },
  },
  mounted() {
    window.addEventListener('beforeunload', this.checkAllInitData)
    this.terminalSelected = this.findSelectedTerminal
    this.fetchCategory()
    this.loadPayment()
    this.loadCustomer()
    this.loadCurrency()
    this.checkAllInitData()
  },
  beforeDestroy() {
    window.removeEventListener('beforeunload', null)
  },
  watch: {
    selectedItem(val) {
      if (val != undefined) {
        this.updateSelectedCategoryId(this.categoryList[val]['categ_id'])
      }
    },
  },
  methods: {
    setQty() {},
    pricingLogig(item) {
      console.log(`PRINCING CLICK....${item.id}`)
      this.productPricingSelected = item.id
      this.pricingDialogKey += 1
      this.pricingDialog = true
    },
    openDeliveryBox() {
      if (this.cartOfProduct.length <= 0)
        return swalError2(this.$swal, 'Error', 'ກະລຸນາເລືອກສິນຄ້າ 1 ຢ່າງຂື້ນໄປ')
      this.shippingFormKey += 1
      this.deliveryForm = true
    },
    previewTicket() {
      this.tickePreviewDialog = true
    },
    ...mapActions([
      'initiateData',
      'setSelectedTerminal',
      'setSelectedLocation',
      'clearCustomerFormAction',
      'setSelectedPayment',
    ]),
    checkAllInitData() {
      // setInterval(() => {
      console.info(
        `...loading pos layout ${
          this.findAllTerminal.length
        }... ${new Date().toLocaleTimeString()}`
      )
      if (this.findAllTerminal.length == 0) {
        console.error(`Data missing need to reload`)
        this.initData()
      }
      if (!this.currentSelectedLocation) {
        this.terminalDialog = true
      }
      // }, 1000);
    },
    initData() {
      // Call the method directly
      this.initiateData(this.$axios)
    },
    switchTerminal() {
      this.setSelectedTerminal(this.terminalSelected)
      const location = this.findAllLocation.find(
        (el) =>
          el.id ==
          this.findAllTerminal.find((el) => el.id == this.terminalSelected)[
            'locationId'
          ]
      )
      this.setSelectedLocation(location)
      this.productComponentKey += 1
      this.terminalDialog = false
    },
    generatePrintViewDeliveryCustomer() {
      let txnListHtml = ``
      for (const iterator of this.productCart) {
        const product = this.findAllProduct.find((el) => el.id == iterator.id)
        console.log(`=======${product}======`)
        const quantity = iterator.qty
        const total = iterator.qty * iterator.localPrice
        txnListHtml += `<div class="ticket">
                    <div class="product-name">${product.pro_name} </div>
                    <div class="price"> ${quantity} ${
          this.onlineCustomerInfo.payment == 'COD'
            ? ' X ' + this.formatNumber(total)
            : ''
        }</div>
                </div>`
      }
      const discountHtml = `<div class="ticket">
                    <div class="product-name">ສ່ວນຫລຸດ </div>
                    <div class="price"> - ${this.formatNumber(
                      this.discount
                    )}</div>
                </div>`
      const riderFeeHtml = `<div class="ticket">
                    <div class="product-name">ຄ່າສົ່ງ </div>
                    <div class="price">${this.formatNumber(
                      this.onlineCustomerInfo.riderFee
                    )}</div>
                </div>`
      const today = new Date()
      const bookingDate = jsDateToMysqlDate(today)
      const bookingDateWithTime = today.toISOString
      // let totalHtml = ``
      //*********Payment info tag********/
      let totalHtml = ``
      // let totalHtml = `<div class="ticket">
      //         <div class="product-name"> ${this.onlineCustomerInfo.payment}</div>
      //     <div class="price"></div>
      // </div>`
      for (const iterator of this.currencyList) {
        if (
          iterator.code == 'LAK' &&
          (this.onlineCustomerInfo.payment == 'COD' ||
            this.onlineCustomerInfo.shipping == 'RIDER')
        ) {
          totalHtml += `
                                    <div class="ticket">
                                        <div class="product-name"> </div>
                                    <div class="price-total"> <h5>ຍອດລວມ(${
                                      this.onlineCustomerInfo.payment
                                    }): ${this.formatNumber(
            (this.grandTotal +
              +this.onlineCustomerInfo.riderFee -
              this.discount) /
              iterator.rate
          )}  </h5> </div>
                                </div>
                                    `
        }
      }

      const windowContent = `
         ${this.ticketCommon.header}
            <body>
                <h5> ວັນທີ: ${today.toLocaleString()}</h5>
                <h5> ຮ້ານ: ${this.onlineCustomerInfo.branch} </h5>
                <h5> ເບີໂທ: ${this.onlineCustomerInfo.branchTel} </h5>
                <hr> </hr>
                <h5> ຜູ້ຮັບ: ${this.onlineCustomerInfo.name}</h5>
                <h5> ໂທ: ${this.onlineCustomerInfo.tel} </h5>
                <h5> ຂົນສົ່ງ: ${this.onlineCustomerInfo.shipping} </h5>
                <h5> ບ່ອນສົ່ງ: ${this.onlineCustomerInfo.address} </h5>
              ${
                this.onlineCustomerInfo.shipping == 'RIDER'
                  ? ``
                  : `<h5> ຄ່າຝາກ: ${this.onlineCustomerInfo.shippingFeeBy}</h5>`
              }  
                <hr> </hr>
                ${txnListHtml}
                ${this.onlineCustomerInfo.riderFee > 0 ? riderFeeHtml : ''}
                ${
                  this.discount > 0 && this.onlineCustomerInfo.payment == 'COD'
                    ? discountHtml
                    : ''
                }
                <hr> </hr>
                ${totalHtml}
            </body>
            </html>
        `
      const printWin = window.open(
        '',
        '',
        'left=0,top=0,width=2480,height=3508,toolbar=0,scrollbars=0,status=0'
      )
      printWin.document.open()
      printWin.document.write(windowContent)

      setTimeout(() => {
        printWin.print()
        printWin.close()
      }, 1000)
    },
    printDefaultTicket() {
      console.log(`printDefaultTicket ${this.changes}`)
      const theChanges = this.changes;
      defaultTicket({
        productCart: this.productCart,
        findAllProduct: this.findAllProduct,
        formatNumber: this.formatNumber,
        discount: this.discount,
        currencyList: this.currencyList,
        grandTotal: this.grandTotal,
        companyLogo: this.companyLogo,
        lastTransactionSaleHeaderId: this.lastTransactionSaleHeaderId,
        currentTerminal: this.currentTerminal,
        user: this.user,
        ticketCommon: this.ticketCommon,
        currentPaymentCode: this.currentPaymentCode,
        cashReceived: this.cashReceived,
        changes: theChanges,
      })
    },

    generatePrintView() {
      let txnListHtml = ``
      for (const iterator of this.productCart) {
        const product = this.findAllProduct.find((el) => el.id == iterator.id)
        console.log(`=======${product}======`)
        const quantity = iterator.qty
        const total = iterator.qty * iterator.localPrice
        // txnListHtml += `<div style="font-size: 14px;">${product.pro_name} x${quantity} - ${this.formatNumber(total)}</div>`
        txnListHtml += `<div class="ticket">
                    <div class="product-name" >${product.pro_name} </div>
                    <div class="price" >  ${this.formatNumber(total)}</div>
                </div>
                <div class="product-name" >${quantity} X ${this.formatNumber(
          iterator.localPrice
        )}</div>
                <br>
                    `
      }
      const discountHtml = `<div class="ticket">
                    <div class="product-name">ສ່ວນຫລຸດ </div>
                    <div class="price"> - ${this.formatNumber(
                      this.discount
                    )}</div>
                </div>`
      const today = new Date()
      const bookingDate = jsDateToMysqlDate(today)
      const bookingDateWithTime = today.toISOString
      let totalHtml = ``
      for (const iterator of this.currencyList) {
        totalHtml += `
                <div class="ticket">
                    <div class="product-name"></div>
                <div class="price-footer">${iterator.code} ${this.formatNumber(
          (this.grandTotal - this.discount) / iterator.rate
        )}</div>
            </div>
                `
      }
      //******* Currency hard code for TONOO SHOP ONLY****** */
      // totalHtml = `
      //           <div class="ticket">
      //               <div class="product-name"></div>
      //           <div class="price">THB ${this.formatNumber(
      //             this.grandTotal - this.discount
      //           )}</div>
      //       </div>
      //           `
      //******* Currency hard code for TONOO SHOP ONLY****** */
      /*
 <div style="text-align: center;">
                    <img src="${
                      this.companyLogo
                    }" alt="Description of the image" width="200" height="200">
                </div>
                <h3> ໃບຮັບເງິນ</h3>
                <h5> ວັນທີ ${today.toLocaleString()}</h5>
                <h5> ເລກທີ ${this.lastTransactionSaleHeaderId} </h5>
                <h5> ເບີໂທຮ້ານ ${
                  this.currentTerminal['location']['company']['tel']
                }</h5>
                <h5> ຜູ້ຂາຍ: ${this.user.cus_name}  </h5>
*/

      const windowContent = `
         ${this.ticketCommon.header}
            <body>
               <h3>ໃບຮັບເງິນ</h3>
               <div style="display: flex; align-items: center; justify-content: space-between;">
  <!-- Left: Logo -->
  <div style="flex: 0 0 auto;">
    <img 
      src="${this.companyLogo}" 
      alt="Description of the image" 
      width="100" 
      height="100">
  </div>

  <!-- Right: Shop Information -->
  <div style="flex: 1; text-align: right;">
   
    <h5>ວັນທີ: ${today.toLocaleString()}</h5>
    <h5>ເລກທີ: ${this.lastTransactionSaleHeaderId}</h5>
    <h5>ເບີໂທຮ້ານ: ${this.currentTerminal['location']['company']['tel']}</h5>
    <h5>ຜູ້ຂາຍ: ${this.user.cus_name}</h5>
  </div>
</div>
                <hr style="margin-top: 20px;"> </hr>
                
                ${txnListHtml}
                ${this.discount > 0 ? discountHtml : ''}
                <hr> </hr>
                <div class="ticket">
                                        <div class="product-name"> </div>
                                    <div class="price-total"> <h5>ຊຳລະດ້ວຍ: ${
                                      this.currentPaymentCode
                                    }  </h5> </div>
                                 
                                </div>
                <div class="ticket">
                                
                                        <div class="product-name"> </div>
                                    <div class="price-total"> <h5>ຮັບຊຳລະ: ${this.formatNumber(
                                      this.cashReceived
                                    )}  </h5> </div>
                                </div>
                <div class="ticket">
                                      
                                        <div class="product-name"> </div>
                                    <div class="price-total"> <h5>ເງິນທອນ: ${
                                      this.changes
                                    }  </h5> </div>
                                </div>
                ${totalHtml}
                <h2 style="text-align: center; margin-top: 50px;"> THANKYOU </h2>
                
            </body>
            </html>
        `
      const printWin = window.open(
        '',
        '',
        'left=0,top=0,width=2480,height=3508,toolbar=0,scrollbars=0,status=0'
      )
      printWin.document.open()
      printWin.document.write(windowContent)

      setTimeout(() => {
        printWin.print()
        printWin.close()
      }, 1000)
    },

    async setQuotation() {
      if (this.isloading || this.generateSaleLine == 0) {
        if (this.generateSaleLine == 0) {
          swalError2(this.$swal, 'Error', 'ກະລຸນາເລືອກສິນຄ້າ 1 ຢ່າງຂື້ນໄປ')
        }
        return
      }

      const today = new Date()
      this.isloading = true
      this.saleHeader.discount = this.discount
      this.saleHeader.remark = 'Quotation'
      this.saleHeader.total = this.grandTotal - this.discount // Sale header total base on mobile logic (it is exclude discount amount)
      this.saleHeader.clientId = this.currenctCustomer.id
      this.saleHeader.paymentId = this.currentPayment
      this.saleHeader.currencyId = 1 // DEFAULT CURRENCY I FOR LAK
      this.saleHeader.lines = this.generateSaleLine
      this.saleHeader.userId = this.user.id
      this.saleHeader.bookingDate = jsDateToMysqlDate(today)
      this.saleHeader.isActive = true
      await this.$axios
        .post('/api/quotation/create', this.saleHeader)
        .then((res) => {
          this.lastTransactionSaleHeaderId = res.data
            .split('-')[1]
            .toString()
            .trim()
          // localStorage.setItem('customer', JSON.stringify(this.currenctCustomer));
          // localStorage.setItem('product', JSON.stringify(this.productCart));
          // localStorage.setItem('quotationId', this.lastTransactionSaleHeaderId);
          window.open(
            `/admin/PDFQuotation/${this.lastTransactionSaleHeaderId}`,
            '_blank'
          )
          // swalSuccess(this.$swal, "Succeed", res.data)
        })
        .catch((er) => {
          swalError2(this.$swal, 'Error', er)
        })
      this.isloading = false
    },
    openCustomerDialog() {
      this.customerDialog = true
    },
    // ...mapMutations({
    //   SetSearchKeyword: 'SetSearchKeyword',
    // }),
    ...mapMutations({
      SetSearchKeyword: 'SetSearchKeyword',
      UPDATE_QTY: 'UPDATE_QTY',
    }),

    updateQty(productId, newQty) {
      const qty = parseInt(newQty) || 0 // Ensure it's a valid number
      this.UPDATE_QTY({ productId, qty })
    },

    openQtyDialog(item) {
      this.selectedProductId = item.id
      this.newQty = item.qty
      this.qtyDialog = true
    },

    updateQty() {
      if (this.selectedProductId !== null) {
        this.UPDATE_QTY({ productId: this.selectedProductId, qty: this.newQty })
        this.qtyDialog = false
      }
    },
    async postTransactionForOnlineCustomer(payload) {
      console.log(`Posting.......`)
      this.saleHeader.customerForm = payload.customerForm
      this.discount = payload.customerForm.discount
      this.onlineCustomerInfo = payload.customerInfo
      await this.postTransaction(true)
      // ************ Clear online customer information after sale done *************//
      // this.saleHeader.customerForm = null
      delete this.saleHeader.customerForm
      this.deliveryForm = false
    },

    async postTransaction(isDeliveryCustomer) {
      if (this.isloading || this.generateSaleLine == 0) {
        if (this.generateSaleLine == 0) {
          swalError2(this.$swal, 'Error', 'ກະລຸນາເລືອກສິນຄ້າ 1 ຢ່າງຂື້ນໄປ')
        }
        return
      }
      const today = new Date()
      this.isloading = true
      this.saleHeader.isActive = true
      this.saleHeader.discount = this.discount
      this.saleHeader.total = this.grandTotal - this.discount // Sale header total base on mobile logic (it is exclude discount amount)
      this.saleHeader.clientId = this.currenctCustomer.id
      this.saleHeader.paymentId = this.currentPayment
      this.saleHeader.currencyId = 1 // DEFAULT CURRENCY I FOR LAK
      this.saleHeader.lines = this.generateSaleLine
      this.saleHeader.userId = this.user.id
      this.saleHeader.bookingDate = jsDateToMysqlDate(today)
      this.saleHeader.locationId = this.currentTerminal['locationId']
      // console.log('HEADER ' +this.saleHeader['locationId']);
      // return
      await this.$axios
        .post('/api/sale/create', this.saleHeader)
        .then((res) => {
          this.lastTransactionSaleHeaderId = res.data.split('-')[1].trim()
          swalSuccess(this.$swal, 'Succeed', res.data.split('-')[0])
          console.log('response post completed===> ' + res.data)
          if (isDeliveryCustomer) {
            this.generatePrintViewDeliveryCustomer()
            // ******** clear delivery form state ***********
            this.clearCustomerFormAction()
          } else {
            // this.generatePrintView()
            this.printDefaultTicket()
          }
          this.newOrder()
          this.discount = 0
          this.cashReceived = 0
        })
        .catch((er) => {
          console.error(`error occurs ${er}`)
          if (er.response.data.includes('#')) {
            const id = er.response.data.split('#')[1]
            const productName = ''
            const product = this.findAllProduct.find((el) => el.id == id)
            console.log(`PRODUCT FILTER ${product}`)
            swalError2(
              this.$swal,
              'Error',
              `ຈຳນວນສິນຄ້າ: ${product.pro_name || ''} ມີບໍ່ພຽງພໍໃນສາງ`
            )
          } else {
            swalError2(this.$swal, 'Error', er.response.data)
          }
        })
      this.isloading = false
    },
    ...mapActions([
      'deleteProduct',
      'addProduct',
      'clearCart',
      'updateSelectedCategoryId',
      'deleteProductFromCart',
      'addSelectedPayment',
      'addCustomer',
    ]),
    formatNumber(val) {
      return getFormatNum(val)
    },
    selectePaymentMethod(id) {
      console.log('selected payment ', id)
      this.addSelectedPayment(id)
      console.log('SAATE ', this.currentPayment)
    },
    previewTicket(saleHeaderId) {
      const path = this.isQuotation ? 'PDFQuotation' : 'PDFInvoice'
      window.open(`/admin/PDFTicket/${saleHeaderId}`, '_blank')
    },
    async fetchCategory() {
      this.isLoading = true
      await this.$axios
        .get('category_f')
        .then((res) => {
          console.log('=>category' + res.data)
          //**** all category ******/
          this.categoryList = res.data.map((el) => {
            return {
              categ_id: el.categ_id,
              categ_name: el.categ_name,
              categ_desc: el.categ_desc,
            }
          })
          //**** all category ******/
          this.categoryList.push({
            categ_id: '9999',
            categ_name: 'ທັງໝົດ',
            categ_desc: 'ລາຍການສິນຄ້າ ທັງໝົດ',
          })
          this.selectedItem = this.categoryList.length - 1
        })
        .catch((er) => {
          console.log('error: ' + er.response.data)
        })
      this.isLoading = false
    },
    async loadPayment() {
      this.isloading = true
      this.paymentList = []
      await this.$axios
        .get('/api/paymentMethod/find')
        .then((res) => {
          for (const iterator of res.data) {
            console.log('Payment', iterator)
            this.paymentList.push(iterator)
          }
        })
        .catch((er) => {
          // console.log('Data: ' + er)
          swalError2(this.$swal, 'Error', er)
        })
      this.selectePaymentMethod(this.paymentList[0]['id'])
      this.isloading = false
    },
    async loadCurrency() {
      this.isloading = true
      this.currencyList = []
      console.log('Loading currency ===>')
      await this.$axios
        .get('/api/currency/find')
        .then((res) => {
          for (const iterator of res.data) {
            this.currencyList.push(iterator)
          }
        })
        .catch((er) => {
          // console.log('Data: ' + er)
          swalError2(this.$swal, 'Error', er)
        })
      this.isloading = false
    },

    // ******** Set select default customer as WALK-IN ********//
    async loadCustomer() {
      this.isloading = true
      await this.$axios
        .get('api/client/find')
        .then((res) => {
          this.addCustomer(res.data[0])
        })
        .catch((er) => {
          console.log('Error: ' + er)
          swalError2(this.$swal, 'ເກີດຂໍ້ຜິດພາດ', er.response.data)
        })
      this.isloading = false
    },
    newOrder() {
      //  ********** Enable below line to confirm before clear ***********//
      // confirmSwal(this.$swal, 'ທ່ານ ກຳລັງຈະຂື້ນບິນໃໝ່', this.clearCart)
      this.clearCart()
    },
  },
}
</script>
